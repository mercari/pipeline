<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.mercari.solution</groupId>
  <artifactId>pipeline</artifactId>
  <version>1.0.0-alpha1</version>
  <name>Mercari Pipeline</name>

  <packaging>${packaging}</packaging>

  <properties>
    <beam.version>2.65.0</beam.version>

    <snakeyaml.version>2.9</snakeyaml.version>
    <freemarker.version>2.3.34</freemarker.version>
    <exp4j.version>0.4.8</exp4j.version>
    <commons-math3.version>3.6.1</commons-math3.version>
    <lucene.version>10.2.1</lucene.version>
    <pdfbox.version>3.0.5</pdfbox.version>
    <jsoup.version>1.20.1</jsoup.version>

    <hbase.version>2.6.2</hbase.version>
    <mysql-connector.version>8.4.0</mysql-connector.version>
    <postgresql-connector.version>42.7.5</postgresql-connector.version>
    <sqlserver-connector.version>8.4.1.jre11</sqlserver-connector.version>
    <alloydb-connector.version>1.2.2</alloydb-connector.version>
    <jdbc-socket-factory.version>1.25.0</jdbc-socket-factory.version>
    <hikaricp.version>6.3.0</hikaricp.version>
    <h2.version>2.3.232</h2.version>
    <drive.version>v3-rev20250427-2.0.0</drive.version>

    <onnxruntime.version>1.22.0</onnxruntime.version>
    <onnxruntime-extensions.version>0.13.0</onnxruntime-extensions.version>
    <onnx.version>1.17.0-1.5.11</onnx.version>

    <slf4j.version>2.0.16</slf4j.version>
    <junit.version>4.13.1</junit.version>
    <mockito.version>3.0.0</mockito.version>

    <maven-jib-plugin.version>3.4.4</maven-jib-plugin.version>
    <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
    <maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
    <maven-shade-plugin.version>3.1.0</maven-shade-plugin.version>
    <maven-surefire-plugin.version>2.21.0</maven-surefire-plugin.version>

    <jakarta-servlet.version>6.1.0</jakarta-servlet.version>

    <packaging>jar</packaging>
    <jib.entrypoint>INHERIT</jib.entrypoint>
    <jib.image>gcr.io/dataflow-templates-base/java21-template-launcher-base:latest</jib.image>
    <jib.appRoot>/template/MPipeline</jib.appRoot>

  </properties>

  <repositories>
    <repository>
      <id>apache.snapshots</id>
      <name>Apache Development Snapshot Repository</name>
      <url>https://repository.apache.org/content/repositories/snapshots/</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>21</source>
          <target>21</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
        <configuration>
          <parallel>all</parallel>
          <threadCount>4</threadCount>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit47</artifactId>
            <version>${maven-surefire-plugin.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Ensure that the Maven jar plugin runs before the Maven
        shade plugin by listing the plugin higher within the file. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven-jar-plugin.version}</version>
      </plugin>

      <!--
        Configures `mvn package` to produce a bundled jar ("fat jar") for runners
        that require this for job submission to a cluster.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven-shade-plugin.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <finalName>${project.artifactId}-bundled-${project.version}</finalName>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/LICENSE</exclude>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>${maven-jib-plugin.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <from>
            <image>${jib.image}</image>
          </from>
          <container>
            <appRoot>${jib.appRoot}</appRoot>
            <entrypoint>${jib.entrypoint}</entrypoint>
            <environment>
              <APP_VERSION>${project.version}</APP_VERSION>
              <DATAFLOW_JAVA_COMMAND_SPEC>/template/MPipeline/resources/command-spec.json</DATAFLOW_JAVA_COMMAND_SPEC>
            </environment>
            <jvmFlags>
              <jvmFlag>-Xms2048m</jvmFlag>
              <jvmFlag>-Xmx2048m</jvmFlag>
              <jvmFlag>-Xdebug</jvmFlag>
              <jvmFlag>-Xmy:flag=jib-rules</jvmFlag>
            </jvmFlags>
          </container>
        </configuration>
      </plugin>

    </plugins>

  </build>

  <profiles>

    <!-- Makes the DataflowRunner available when running a dataflow pipeline job. -->
    <profile>
      <id>dataflow</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-runners-google-cloud-dataflow-java</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
    </profile>

    <!-- Makes the DirectRunner available when running a local pipeline job. -->
    <profile>
      <id>direct</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <jib.entrypoint>java,-cp,/template/MPipeline/libs/*:/template/MPipeline/classes:/template/MPipeline/resources/libs/*,-Xmx4096m,com.mercari.solution.MPipeline,--runner=DirectRunner</jib.entrypoint>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <configuration>
              <container>
                <environment>
                  <GOOGLE_APPLICATION_CREDENTIALS>/mnt/gcloud/application_default_credentials.json</GOOGLE_APPLICATION_CREDENTIALS>
                </environment>
              </container>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-runners-direct-java</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
    </profile>

    <!-- Makes the PrismRunner available when running a local pipeline job. -->
    <profile>
      <id>prism</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <jib.entrypoint>java,-cp,/template/MPipeline/libs/*:/template/MPipeline/classes:/template/MPipeline/resources/libs/*,-Xmx4096m,com.mercari.solution.MPipeline,--runner=PrismRunner</jib.entrypoint>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <configuration>
              <container>
                <environment>
                  <GOOGLE_APPLICATION_CREDENTIALS>/mnt/gcloud/application_default_credentials.json</GOOGLE_APPLICATION_CREDENTIALS>
                </environment>
              </container>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-runners-prism-java</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
    </profile>

    <!-- Makes the PortableRunner available when running a portable pipeline job. -->
    <profile>
      <id>portable</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <jib.entrypoint>java,-cp,/template/MPipeline/libs/*:/template/MPipeline/classes:/template/MPipeline/resources/libs/*,-Xmx4096m,com.mercari.solution.MPipeline,--runner=PortableRunner</jib.entrypoint>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-runners-portability-java</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
    </profile>

    <!-- Makes the FlinkRunner available when running a flink pipeline job. -->
    <profile>
      <id>flink</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <flink.version>1.19</flink.version>
        <jib.image>apache/beam_flink${flink.version}_job_server</jib.image>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-runners-flink-${flink.version}</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
    </profile>

    <!-- Makes the SparkRunner available when running a spark pipeline job. -->
    <profile>
      <id>spark</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <jib.entrypoint>java,-cp,/template/MPipeline/libs/*:/template/MPipeline/classes:/template/MPipeline/resources/libs/*,-Xmx4096m,com.mercari.solution.MPipeline,--runner=SparkRunner</jib.entrypoint>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-runners-spark-3</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
    </profile>

    <!-- Makes the Config Builder on Jetty available. -->
    <profile>
      <id>server</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <packaging>war</packaging>
        <jetty.version>11.0.25</jetty.version>
        <jib.image>jetty:${jetty.version}-jdk21</jib.image>
        <jib.entrypoint>java,-jar,/usr/local/jetty/start.jar</jib.entrypoint>
        <jib.appRoot>/var/lib/jetty/webapps/ROOT</jib.appRoot>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-runners-direct-java</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>${jetty.version}</version>
          </plugin>
        </plugins>
      </build>

    </profile>

  </profiles>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.beam</groupId>
        <artifactId>beam-sdks-java-google-cloud-platform-bom</artifactId>
        <version>${beam.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Adds a dependency on the Beam SDK. -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-core</artifactId>
    </dependency>

    <!-- Adds a dependency on the Beam Google Cloud Platform IO module. -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-google-cloud-platform</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-io-amazon-web-services2 -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-amazon-web-services2</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-io-jdbc -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-jdbc</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-io-parquet -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-parquet</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-io-kafka -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-kafka</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-iceberg</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-managed</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-io-rrio -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-rrio</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-extensions-sql -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-extensions-sql</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.beam/beam-sdks-java-extensions-sql-zetasql -->
    <!-- remove comment out if zetasql planner is needed -->
    <!--
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-extensions-sql-zetasql</artifactId>
      <exclusions>
        <exclusion>
          <groupId>com.google.protobuf</groupId>
          <artifactId>protobuf-javalite</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    -->

    <!-- Big Data -->
    <!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-common -->
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase-common</artifactId>
      <version>${hbase.version}</version>
      <!--
      <exclusions>
        <exclusion>
          <groupId>io.opentelemetry</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
        -->
    </dependency>

    <!-- Machine Learning -->
    <!-- https://mvnrepository.com/artifact/com.microsoft.onnxruntime/onnxruntime -->
    <dependency>
      <groupId>com.microsoft.onnxruntime</groupId>
      <artifactId>onnxruntime</artifactId>
      <version>${onnxruntime.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.microsoft.onnxruntime/onnxruntime-extensions -->
    <dependency>
      <groupId>com.microsoft.onnxruntime</groupId>
      <artifactId>onnxruntime-extensions</artifactId>
      <version>${onnxruntime-extensions.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.bytedeco/onnx-platform -->
    <dependency>
      <groupId>org.bytedeco</groupId>
      <artifactId>onnx-platform</artifactId>
      <version>${onnx.version}</version>
    </dependency>

    <!-- Search Engine -->
    <dependency>
      <groupId>org.apache.lucene</groupId>
      <artifactId>lucene-analysis-kuromoji</artifactId>
      <version>${lucene.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.lucene</groupId>
      <artifactId>lucene-analysis-opennlp</artifactId>
      <version>${lucene.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.lucene</groupId>
      <artifactId>lucene-analysis-icu</artifactId>
      <version>${lucene.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox -->
    <dependency>
      <groupId>org.apache.pdfbox</groupId>
      <artifactId>pdfbox</artifactId>
      <version>${pdfbox.version}</version>
    </dependency>

    <!-- Google Services -->
    <!-- https://mvnrepository.com/artifact/com.google.cloud/google-cloud-dataflow -->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-dataflow</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.cloud/google-cloud-secretmanager -->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-secretmanager</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.cloud/google-cloud-iamcredentials -->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-iamcredentials</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.cloud/google-cloud-kms -->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-kms</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.apis/google-api-services-drive -->
    <dependency>
      <groupId>com.google.apis</groupId>
      <artifactId>google-api-services-drive</artifactId>
      <version>${drive.version}</version>
    </dependency>

    <!-- Databases -->
    <!-- https://mvnrepository.com/artifact/com.google.cloud.sql/mysql-socket-factory -->
    <dependency>
      <groupId>com.google.cloud.sql</groupId>
      <artifactId>mysql-socket-factory-connector-j-8</artifactId>
      <version>${jdbc-socket-factory.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.cloud.sql/postgres-socket-factory -->
    <dependency>
      <groupId>com.google.cloud.sql</groupId>
      <artifactId>postgres-socket-factory</artifactId>
      <version>${jdbc-socket-factory.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.cloud.sql/cloud-sql-connector-jdbc-sqlserver -->
    <dependency>
      <groupId>com.google.cloud.sql</groupId>
      <artifactId>cloud-sql-connector-jdbc-sqlserver</artifactId>
      <version>${jdbc-socket-factory.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>${mysql-connector.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql-connector.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc -->
    <dependency>
      <groupId>com.microsoft.sqlserver</groupId>
      <artifactId>mssql-jdbc</artifactId>
      <version>${sqlserver-connector.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.cloud/alloydb-jdbc-connector -->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>alloydb-jdbc-connector</artifactId>
      <version>${alloydb-connector.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>${h2.version}</version>
    </dependency>

    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>${hikaricp.version}</version>
    </dependency>

    <!-- Utils -->
    <!-- https://mvnrepository.com/artifact/org.freemarker/freemarker -->
    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
      <version>${freemarker.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/net.objecthunter/exp4j -->
    <dependency>
      <groupId>net.objecthunter</groupId>
      <artifactId>exp4j</artifactId>
      <version>${exp4j.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.jsoup/jsoup -->
    <dependency>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <version>${jsoup.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.snakeyaml/snakeyaml-engine -->
    <dependency>
      <groupId>org.snakeyaml</groupId>
      <artifactId>snakeyaml-engine</artifactId>
      <version>${snakeyaml.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-math3 -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-math3</artifactId>
      <version>${commons-math3.version}</version>
    </dependency>

    <!-- Log -->
    <!-- Add slf4j API frontend binding with JUL backend -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <version>${slf4j.version}</version>
      <!-- When loaded at runtime this will wire up slf4j to the JUL backend -->
      <scope>runtime</scope>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
    </dependency>

    <!-- The DirectRunner is needed for unit tests. -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-runners-direct-java</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Pipeline Server -->
    <!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api -->
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>${jakarta-servlet.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/io.modelcontextprotocol.sdk/mcp -->
    <dependency>
      <groupId>io.modelcontextprotocol.sdk</groupId>
      <artifactId>mcp</artifactId>
      <version>0.8.1</version>
    </dependency>

  </dependencies>
</project>
